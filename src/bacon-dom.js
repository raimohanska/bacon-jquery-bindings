// Generated by CoffeeScript 1.8.0
(function() {
  var Bacon, BaconModel, init,
    __slice = [].slice;

  init = function(Bacon, BaconModel, JQC) {
    var altIndxOf, indxOf;
    JQC = JQC || {};
    altIndxOf = function(xs, x) {
      var i, y, _i, _len;
      for (i = _i = 0, _len = xs.length; _i < _len; i = ++_i) {
        y = xs[i];
        if (x === y) {
          return i;
        }
      }
      return -1;
    };
    indxOf = function(xs, x) {
      return xs.indexOf(x);
    };
    Bacon.$.indexOf = Array.prototype.indexOf ? indxOf : altIndxOf;
    Bacon.$.Model = Bacon.Model;
    Bacon.$.Selector = JQC;
    Bacon.$.Request = JQC;
    Bacon.$.Promise = JQC;
    Bacon.$.Extender = JQC.fn;
    Bacon.$.plugin = function() {
      var name, names, plugin, _i, _len, _results;
      names = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        plugin = require("./bacon-" + name);
        _results.push(plugin(Bacon.$));
      }
      return _results;
    };
    return Bacon.$;
  };

  if (typeof module !== "undefined" && module !== null) {
    Bacon = require("baconjs");
    BaconModel = require("bacon.model");
    module.exports = init(Bacon, BaconModel, $);
  } else {
    if (typeof define === "function" && define.amd) {
      define(["bacon", "bacon.model", $], init);
    } else {
      init(this.Bacon, this.BaconModel, this.$);
    }
  }

}).call(this);

//# sourceMappingURL=bacon-dom.js.map
