// Generated by CoffeeScript 1.8.0
(function() {
  module.exports = function($) {
    var asJQC, assertArrayOrJQC, nonEmpty;
    nonEmpty = function(x) {
      return x.length > 0;
    };
    assertArrayOrJQC = function(x) {
      if (!(typeof x === 'object' || x instanceof Array)) {
        throw new Error('Value must be either an object or an Array of objects which conform to a minimal element query interface');
      }
    };
    asJQC = function(x) {
      return $.Selector.toJQC(x);
    };
    $.textField = {
      interval: 50,
      take: 10
    };
    $.textField = {
      value: function(element, options) {
        var autofillPoller, defaultOpt, events, get, initValue;
        defaultOpt = $.textField;
        initValue = options.init;
        get = function() {
          return element.val() || "";
        };
        autofillPoller = function() {
          return Bacon.interval(options.interval || defaultOpt.interval).take(options.take || defaultOpt.take).map(get).filter(nonEmpty).take(1);
        };
        events = element.asEventStream("keyup input").merge(element.asEventStream("cut paste").delay(1)).merge(autofillPoller());
        return Bacon.Binding({
          initValue: initValue,
          get: get,
          events: events,
          set: function(value) {
            return element.val(value);
          }
        });
      }
    };
    $.checkBox = {
      value: function(element, options) {
        var initValue;
        initValue = options.init;
        return Bacon.Binding({
          initValue: initValue,
          get: function() {
            return element.prop("checked") || false;
          },
          events: element.asEventStream("change"),
          set: function(value) {
            return element.prop("checked", value);
          }
        });
      },
      groupValue: function(checkBoxes, options) {
        var initValue;
        initValue = options.init;
        assertArrayOrJQC(checkBoxes);
        checkBoxes = asJQC(checkBoxes);
        return Bacon.Binding({
          initValue: initValue,
          get: function() {
            return checkBoxes.filter(":checked").map(function(i, elem) {
              return $.Selector(elem).val();
            }).toArray();
          },
          events: checkBoxes.asEventStream("change"),
          set: function(value) {
            return checkBoxes.each(function(i, elem) {
              return $.Selector(elem).prop("checked", $.indexOf(value, $.Selector(elem).val()) >= 0);
            });
          }
        });
      }
    };
    $.select = {
      value: function(element, options) {
        var initValue;
        initValue = options.init;
        return Bacon.Binding({
          initValue: initValue,
          get: function() {
            return element.val();
          },
          events: element.asEventStream("change"),
          set: function(value) {
            return element.val(value);
          }
        });
      }
    };
    return $.radioGroup = {
      value: function(radios, options) {
        var initValue;
        initValue = options.init;
        assertArrayOrJQC(radios);
        radios = asJQC(radios);
        return Bacon.Binding({
          initValue: initValue,
          get: function() {
            return radios.filter(":checked").first().val();
          },
          events: radios.asEventStream("change"),
          set: function(value) {
            return radios.each(function(i, elem) {
              return $.Selector(elem).prop("checked", elem.value === value);
            });
          }
        });
      },
      intValue: function(radios, options) {
        var initValue, radioGroupValue;
        initValue = options.init;
        radioGroupValue = $.radioGroupValue(radios);
        return Bacon.Binding({
          initValue: initValue,
          get: function() {
            var value;
            value = radioGroupValue.get();
            if (value != null) {
              return parseInt(value);
            } else {
              return value;
            }
          },
          events: radioGroupValue.syncEvents(),
          set: function(value) {
            var strValue;
            strValue = value != null ? Number(value).toString() : value;
            return radioGroupValue.set(strValue);
          }
        });
      }
    };
  };

}).call(this);

//# sourceMappingURL=bacon-dom-input.js.map
